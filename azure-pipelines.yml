trigger:
  batch: true
  branches:
    include:
    - main
  tags:
    include:
    - SDK-v*
    - Runtime-v*
pr:
  autoCancel: false
  branches:
    include:
    - '*'

variables:
  is-runtime-release: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/Runtime-v')]
  is-sdk-release: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/SDK-v')]

stages:
##### Test and Build #####
- stage: Build
  jobs:
  ##### Build #####
  - job: Build
    displayName: 'Build and Test'
    pool:
      vmImage: $(imageName)
    strategy:
      matrix:
        Linux:
          imageName: 'ubuntu-latest'
        Mac:
          imageName: 'macOS-latest'
        Windows:
          imageName: 'windows-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '15.x'
      displayName: 'Install Node.js'
    - script: build.cmd
      displayName: Build Windows
      condition: eq(variables['Agent.OS'], 'Windows_NT')
    - script: test.cmd
      displayName: Test Windows
      condition: eq(variables['Agent.OS'], 'Windows_NT')
    - bash: |
        /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        echo ">>> Started xvfb"
      displayName: Start xvfb
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    - script: ./build.sh
      displayName: Build Mac and Linux
      condition: or(eq(variables['Agent.OS'], 'Darwin'), eq(variables['Agent.OS'], 'Linux'))
    - script: ./test.sh
      displayName: Test Mac and Linux
      env: { DISPLAY: ':99.0' }
      condition: or(eq(variables['Agent.OS'], 'Darwin'), eq(variables['Agent.OS'], 'Linux'))
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/vscode-dotnet-runtime-extension/dist/test/functional/logs'
        artifactName: 'logs'
      displayName: Publish Logs
      condition: always()
  ##### TSLint #####
  - job: TSLint
    displayName: 'TSLint'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '15.x'
      displayName: 'Install Node.js'
    - bash: |
        yarn install tslint --frozen-lockfile --verbose
        yarn run lint
      displayName: Run Lint
  ##### Package and Publish #####
  - job: Package
    displayName: 'Package and Publish'
    dependsOn: 
    - Build
    - TSLint
    condition: succeeded()
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        Runtime:
          dir-name: 'vscode-dotnet-runtime-extension'
          package-name: 'vscode-dotnet-runtime'
        SDK:
          dir-name: 'vscode-dotnet-sdk-extension'
          package-name: 'vscode-dotnet-sdk'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '15.x'
      displayName: 'Install Node.js'
    - bash: |
        if ([ $(is-sdk-release) = 'True' ] && [ $(package-name) = 'vscode-dotnet-sdk' ]) || ([ $(is-runtime-release) = 'True' ] && [ $(package-name) = 'vscode-dotnet-runtime' ]); then
          VERSION=`node -p "require('./package.json').version"`
        else
          VERSION_NUM=`node -p "require('./package.json').version"`
          VERSION="$VERSION_NUM-alpha-$(Build.BuildId)"
        fi
        npm version $VERSION --allow-same-version
        echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
      name: GetVersion
      displayName: 'Get Version'
      workingDirectory: $(dir-name)
    - bash: |
          yarn install rimraf --verbose
          yarn global add vsce --verbose
          vsce package -o $(package-name)-$(GetVersion.version).vsix --ignoreFile ../.vscodeignore --yarn
      displayName: Package Artifact
      workingDirectory: $(dir-name)
    - task: CopyFiles@2
      displayName: 'Copy Artifact'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: '**\*.vsix'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true
    - task: PublishPipelineArtifact@0
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(dir-name)'

##### Deploy and Release Runtime Extension #####
- stage: DeployAndReleaseRuntime
  dependsOn: Build
  condition: and(succeeded(), eq(variables['is-runtime-release'], 'true'))
  jobs:
  ##### Deploy to our release environment #####
  # Note: This step requires approval, allows for manual smoke testing the artifact before release
  - deployment: Deploy
    pool:
      vmImage: 'windows-latest'
    environment: 'vscode-dotnetcore-extension-releases'
  ##### Determine version to publish #####
  - job: GetVersion
    displayName: 'Get Version'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '15.x'
      displayName: 'Install Node.js'
    - bash: |
        VERSION=`node -p "require('./package.json').version"`
        echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
      name: GetVersion
      workingDirectory: 'vscode-dotnet-runtime-extension'
      displayName: 'Get Version'
  ##### Publish to marketplace #####
  - job: Publish
    displayName: 'Publish to Marketplace'
    dependsOn: 
    - Deploy
    - GetVersion
    pool:
      vmImage: 'windows-latest'
    variables:
      version: $[ dependencies.GetVersion.outputs['GetVersion.version'] ]
    steps:
    - checkout: none # Skip checking out repo
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Packaged Extension'
      inputs:
        path: '$(System.ArtifactsDirectory)'
    - task: NodeTool@0
      inputs:
        versionSpec: '15.x'
      displayName: 'Install Node.js'
    - bash: |
        yarn global add vsce --verbose
        vsce publish --packagePath vscode-dotnet-runtime-$(version).vsix -p $(VSCODE_MARKETPLACE_TOKEN) --yarn
      displayName: 'Publish to Marketplace'
      workingDirectory: '$(System.ArtifactsDirectory)/vscode-dotnet-runtime-extension'

##### Deploy and Release SDK Extension #####
- stage: DeployAndReleaseSDK
  dependsOn: Build
  condition: and(succeeded(), eq(variables['is-sdk-release'], 'true'))
  jobs:
  ##### Deploy to our release environment #####
  # Note: This step requires approval, allows for manual smoke testing the artifact before release
  - deployment: Deploy
    pool:
      vmImage: 'windows-latest'
    environment: 'vscode-dotnetcore-extension-releases'
  ##### Determine version to publish #####
  - job: GetVersion
    displayName: 'Get Version'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '15.x'
      displayName: 'Install Node.js'
    - bash: |
        VERSION=`node -p "require('./package.json').version"`
        echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
      name: GetVersion
      workingDirectory: 'vscode-dotnet-sdk-extension'
      displayName: 'Get Version'
  ##### Publish to marketplace #####
  - job: Publish
    displayName: 'Publish to Marketplace'
    dependsOn: 
    - Deploy
    - GetVersion
    pool:
      vmImage: 'windows-latest'
    variables:
      version: $[ dependencies.GetVersion.outputs['GetVersion.version'] ]
    steps:
    - checkout: none # Skip checking out repo
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Packaged Extension'
      inputs:
        path: '$(System.ArtifactsDirectory)'
    - task: NodeTool@0
      inputs:
        versionSpec: '15.x'
      displayName: 'Install Node.js'
    - bash: |
        yarn global add vsce
        vsce publish --packagePath vscode-dotnet-sdk-$(version).vsix -p $(VSCODE_MARKETPLACE_TOKEN) --yarn
      displayName: 'Publish to Marketplace'
      workingDirectory: '$(System.ArtifactsDirectory)/vscode-dotnet-sdk-extension'
